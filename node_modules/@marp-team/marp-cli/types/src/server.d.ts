/// <reference types="node" />
import { Express } from 'express';
import fs from 'fs';
import { Converter, ConvertedCallback } from './converter';
import TypedEventEmitter from './utils/typed-event-emitter';
export declare class Server extends TypedEventEmitter<Server.Events> {
    readonly converter: Converter;
    readonly inputDir: string;
    readonly options: Server.Options;
    readonly port: Number;
    directoryIndex: string[];
    server: Express | undefined;
    private static script;
    constructor(converter: Converter, opts?: Server.Options);
    start(): Promise<void>;
    private convertMarkdown;
    private loadScript;
    private preprocess;
    private setup;
    private template;
    private validateMarkdown;
}
export declare namespace Server {
    interface Events {
        converted: ConvertedCallback;
        error: (err: Error) => void;
    }
    interface Options {
        directoryIndex?: string[];
    }
    interface ValidateResult {
        path: string;
        stats?: fs.Stats;
        valid: boolean;
    }
}
